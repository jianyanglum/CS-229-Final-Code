a = c("张国荣")
a
df = c(" ")
df = as.data.frame(df)
df[df$c1 = " ",]
df[df[1] = " ",]
df[c(1) == " ",]
install.packages(foreign)
install.packages("foreign")
library("foreing")
library("foreign")
cd
pwd
pd
curwd
wd
getwd
getwd()
ls()
ls(getwd())
list.files
list.files()
df= read.arff("Downloads/229files.arff")
head(df)
names(df)
max(df[, $18])
max(df[, 18])
min(df[, 18])
unique(df[, 18])
source('~/.active-rstudio-document')
rm(df)
i = 1
kmmFull = kmeans(scaleFull, i, iter.max = 1000)
scaleFull = scale(full[, c(3:ncol(full))])
mean(scaleFull)
summary(scaleFull)
View(scaleFull)
View(full)
scaleFull = scaleFull[, -3]
View(full)
summary(scaleFull)
i = 2
kmmFull = kmeans(scaleFull, i, iter.max = 1000)
centers = kmm$centers
centers = kmmFull$centers
View(centers)
View(scaleFull)
subset = scaleFull[which(kmmFull$cluster == i), ]
toSubtract = matrix(rep(centers[i, ], each=ncol(subset)), nrow = ncol(subset))
toSubtract = matrix(rep(centers[i, ], each=nrow(subset)), nrow = nrow(subset))
View(toSubtract)
residuals = subset - toSubtract
View(residuals)
residuals %*% t(residuals)
a = residuals %*% t(residuals)
View(a)
rss = tr(residuals %*% t(residuals))
rss = trace(residuals %*% t(residuals))
install.packages("matrixcalc")
library(matrixcalc)
rss = matrix.trace(residuals %*% t(residuals))
centers = kmmFull$centers
rss = rep(0, i)
for (j in 1:i) {
subset = scaleFull[which(kmmFull$cluster == i), ]
toSubtract = matrix(rep(centers[i, ], each=nrow(subset)), nrow = nrow(subset))
residuals = subset - toSubtract
rss[j] = matrix.trace(residuals %*% t(residuals))
}
centers = kmmFull$centers
rss = rep(0, i)
for (j in 1:i) {
subset = scaleFull[which(kmmFull$cluster == j), ]
toSubtract = matrix(rep(centers[j, ], each=nrow(subset)), nrow = nrow(subset))
residuals = subset - toSubtract
rss[j] = matrix.trace(residuals %*% t(residuals))
}
j = 1
subset = scaleFull[which(kmmFull$cluster == j), ]
toSubtract = matrix(rep(centers[j, ], each=nrow(subset)), nrow = nrow(subset))
residuals = subset - toSubtract
rss[j] = matrix.trace(residuals %*% t(residuals))
}
noOfClusters = rep(0, 15)
# avg number of independent voices becomes redundant
for (i in 1:15) {
kmmFull = kmeans(scaleFull, i, iter.max = 1000)
centers = kmmFull$centers
rss = rep(0, i)
for (j in 1:i) {
subset = scaleFull[which(kmmFull$cluster == j), ]
toSubtract = matrix(rep(centers[j, ], each=nrow(subset)), nrow = nrow(subset))
residuals = subset - toSubtract
rss[j] = matrix.trace(residuals %*% t(residuals))
}
noOfClusters[i] = sum(rss)
}
plot(noOfClusters)
plot(noOfClusters, type = "l")
plot(noOfClusters, type = "b")
plot(noOfClusters, type = "b", main = "Elbow Method: Number of Clusters for Whole Chorale Clustering", xlab = "Number of Clusters", ylab = "Residual Sum of Squares from Cluster Centroid", pch = 18)
which(kmmFull$cluster == 1)
which(kmmFull$cluster == 15)
View(subset)
View(centers)
View(residuals)
View(toSubtract)
k = 4
kmmFull = kmeans(scaleFull, k, iter.max = 1000)
centers = kmmFull$centers
rss = rep(0, k)
for (j in 1:k) {
subset = scaleFull[which(kmmFull$cluster == j), ]
toSubtract = matrix(rep(centers[j, ], each=nrow(subset)), nrow = nrow(subset))
residuals = subset - toSubtract
rss[j] = matrix.trace(residuals %*% t(residuals))
}
a =residuals %*% t(residuals)
write.csv(centers, file = "K Means Whole Chorale Centroids.csv")
plotcluster(scaleFull, kmmFull$cluster, xlab = "First Principal Component", ylab = "Second Principal Component", main = "Clustering Results for Different Chorales")
library(cluster)
plotcluster(scaleFull, kmmFull$cluster, xlab = "First Principal Component", ylab = "Second Principal Component", main = "Clustering Results for Different Chorales")
library(fpc)
plotcluster(scaleFull, kmmFull$cluster, xlab = "First Principal Component", ylab = "Second Principal Component", main = "Clustering Results for Different Chorales")
rm(list = ls())
setwd("/Users/jianyanglum/Documents/year 3 quarter 1/STATS 229/Final Project/Final Dataset")
#indiv = read.csv("Individual Voices Full Dataset.csv")
#indiv$voiceType = factor(indiv$voiceType, levels(indiv$voiceType)[c(3, 1, 4, 2)])
full = read.csv("Whole Chorale Full Dataset.csv")
full$voiceType = factor(full$voiceType, levels(full$voiceType)[c(3, 1, 4, 2)])
install.packages("EMCluster")
library(EMCluster)
install.packages("mclust")
install.packages("mclust")
library(mclust)
scaleFull = scale(full[, c(3:ncol(full))])
scaleFull = scaleFull[, -3]
install.packages("mclust")
model = mclust(scaleFull)
model = Mclust(scaleFull)
plot(model, scaleFull)
BIC = mclustBIC(scaleFull)
plot(BIC)
summary(BIC)
install.packages("matrixcalc")
install.packages("matrixcalc")
library(matrixcalc)
scaleFull = scale(full[, c(3:ncol(full))])
scaleFull = scaleFull[, -3]
noOfClusters = rep(0, 15)
# avg number of independent voices becomes redundant
# After picking K, that is
k = 4
kmmFull = kmeans(scaleFull, k, iter.max = 1000)
centers = kmmFull$centers
rss = rep(0, k)
for (j in 1:k) {
subset = scaleFull[which(kmmFull$cluster == j), ]
toSubtract = matrix(rep(centers[j, ], each=nrow(subset)), nrow = nrow(subset))
residuals = subset - toSubtract
rss[j] = matrix.trace(residuals %*% t(residuals))
}
kmmFull.cluster
kmmFull.clusters
kmmFull$cluster
k = 4
kmmFull = kmeans(scaleFull, k, iter.max = 1000)
centers = kmmFull$centers
rss = rep(0, k)
for (j in 1:k) {
subset = scaleFull[which(kmmFull$cluster == j), ]
toSubtract = matrix(rep(centers[j, ], each=nrow(subset)), nrow = nrow(subset))
residuals = subset - toSubtract
rss[j] = matrix.trace(residuals %*% t(residuals))
}
write.csv(kmmFull$cluster, file = "K Means Whole Chorale Predicted Cluster Assignments.csv")
write.csv(centers, file = "K Means Whole Chorale Centroids.csv")
library(cluster)
library(fpc)
plotcluster(scaleFull, kmmFull$cluster, xlab = "First Principal Component", ylab = "Second Principal Component", main = "Clustering Results for Different Chorales")
noOfClusters = rep(0, 15)
# avg number of independent voices becomes redundant
for (i in 1:15) {
kmmFull = kmeans(scaleFull, i, iter.max = 1000)
centers = kmmFull$centers
rss = rep(0, i)
for (j in 1:i) {
subset = scaleFull[which(kmmFull$cluster == j), ]
toSubtract = matrix(rep(centers[j, ], each=nrow(subset)), nrow = nrow(subset))
residuals = subset - toSubtract
rss[j] = matrix.trace(residuals %*% t(residuals))
}
noOfClusters[i] = sum(rss)
}
write.csv(centers, file = "K Means Whole Chorale Centroids.csv")
write.csv(kmmFull$cluster, file = "K Means Whole Chorale Predicted Cluster Assignments.csv")
plot(noOfClusters, type = "b", main = "Elbow Method: Number of Clusters for Whole Chorale Clustering", xlab = "Number of Clusters", ylab = "Residual Sum of Squares from Cluster Centroid", pch = 18)
k = 4
kmmFull = kmeans(scaleFull, k, iter.max = 1000)
centers = kmmFull$centers
rss = rep(0, k)
for (j in 1:k) {
subset = scaleFull[which(kmmFull$cluster == j), ]
toSubtract = matrix(rep(centers[j, ], each=nrow(subset)), nrow = nrow(subset))
residuals = subset - toSubtract
rss[j] = matrix.trace(residuals %*% t(residuals))
}
write.csv(kmmFull$cluster, file = "K Means Whole Chorale Predicted Cluster Assignments.csv")
write.csv(centers, file = "K Means Whole Chorale Centroids.csv")
BIC = mclustBIC(scaleFull)
plot(BIC)
plot(model)
newModel = Mclust(scaleFull, G = 4)
plot(newModel)
densityOld = densityMclust(scaleFull)
summary(densityOld)
dimRed = MclustDR(scaleFull)
dimRed = MclustDR(mod)
dimRed = MclustDR(model)
summary(dimRed)
model$classification
plot.MclustDA(dimred)
plot.MclustDA(dimed)
plot.MclustDA(dimRed)
dimRed = MclustDR(model)
type(dimRed)
class(dimRed)
plot.MclustDR(dimRed)
full$EM2GroupsClassification = model$classification
full$EM4GroupsClassification = newModel$classification
View(full)
dimRed4 = MclustDR(newModel)
plot.MclustDR(dimRed4)
write.csv(full, file = "Full Chorales with EM Clustering Assignments.csv")
kmeansVoices = read.csv("K Means Results v2.csv")
table(kmeansVoices$originals, kmeansVoices$`kmm$cluster`)
View(kmeansVoices)
table(kmeansVoices$voiceType, kmeansVoices$`kmm$cluster`)
table(kmeansVoices$voiceType, kmeansVoices$`kmm.cluster`)
kmeansVoices$voiceType = factor(kmeansVoices$voiceType, levels(kmeansVoices$voiceType)[c(3, 1, 4, 2)])
table(kmeansVoices$voiceType, kmeansVoices$`kmm.cluster`)
kmeansVoices[kmeansVoices$kmm.cluster == 1] = 8
kmeansVoices[kmeansVoices$kmm.cluster == 1, ] = 8
kmeansVoices = read.csv("K Means Results v2.csv")
kmeansVoices$voiceType = factor(kmeansVoices$voiceType, levels(kmeansVoices$voiceType)[c(3, 1, 4, 2)])
kmeansVoices[kmeansVoices$kmm.cluster == 1, kmeansVoices$kmm.cluster] = 8
kmeansVoices[which(kmeansVoices$kmm.cluster == 1), c(4)] = 8
kmeansVoices[which(kmeansVoices$kmm.cluster == 2), c(4)] = 5
kmeansVoices[which(kmeansVoices$kmm.cluster == 4), c(4)] = 6
kmeansVoices[which(kmeansVoices$kmm.cluster == 3), c(4)] = 7
kmeansVoices[, c(4)] = kmeansVoices$kmm.cluster - 4
table(kmeansVoices$voiceType, kmeansVoices$`kmm.cluster`)
errorRate = (178 + 100 + 92 + 127) / 732
errorRate
errorRate = 1 - ((178 + 100 + 92 + 127) / 732)
errorRate
kmeansVoices[which(kmeansVoices$voiceType == "S"), c(3)]
kmeansVoices[which(kmeansVoices$voiceType == S), c(3)]
kmeansVoices[which(kmeansVoices$voiceType == 1), c(3)]
which(kmeansVoices$voiceType == 1)
which(kmeansVoices$voiceType == 'S')
which(kmeansVoices$voiceType == ' S')
kmeansVoices[which(kmeansVoices$voiceType == " S"), c(3)]
kmeansVoices[which(kmeansVoices$voiceType == " S"), c(3)] = "b"
kmeansVoices[which(kmeansVoices$voiceType == " S"), c(3)] = 4
indiv = read.csv("Individual Voices Full Dataset.csv")
kmeansVoices = read.csv("K Means Results v2.csv")
kmeansVoices[which(kmeansVoices$voiceType == " S"), c(3)]
kmeansVoices[which(kmeansVoices$voiceType == " S"), c(3)] = "B"
kmeansVoices = read.csv("K Means Results v2.csv")
voiceOrdering = kmeansVoices$voiceType
voiceOrdering = as.factor(voiceOrdering, levels = c("S", "A", "T", "B", " S", " A", " T", " B"))
kmeansVoices = read.csv("K Means Results v2.csv")
kmeansVoices$voiceType = factor(kmeansVoices$voiceType, levels(kmeansVoices$voiceType)[c(3, 1, 4, 2)])
table(kmeansVoices$voiceType, kmeansVoices$`kmm.cluster`)
kmeansVoices[which(kmeansVoices$kmm.cluster == 1), c(4)] = 5
kmeansVoices[which(kmeansVoices$kmm.cluster == 2), c(4)] = 8
kmeansVoices[which(kmeansVoices$kmm.cluster == 3), c(4)] = 6
kmeansVoices[which(kmeansVoices$kmm.cluster == 4), c(4)] = 7
kmeansVoices[, c(4)] = kmeansVoices$kmm.cluster - 4
table(kmeansVoices$voiceType, kmeansVoices$`kmm.cluster`)
indiv = read.csv("Individual Voices Full Dataset.csv")
indiv$voiceType = factor(indiv$voiceType, levels(indiv$voiceType)[c(3, 1, 4, 2)])
centers = kmm$centers
scaleIndiv = scale(indiv[, c(3:ncol(indiv))])
kmm = kmeans(scaleIndiv, 4, iter.max = 3000)
kmm.results = cbind(indiv[, 1:2], kmm$cluster)
kmm.results$originals = rep(seq(1, 4), nrow(indiv)/4)
table(kmm.results$originals, kmm.results$`kmm$cluster`)
pcrResult = prcomp(scaleIndiv, scale=TRUE)
newpca1 = pcrResult$rotation[, 1]
pcaMatrixForm1 = as.matrix(newpca1)
prcomp1 = scaleIndiv %*% pcaMatrixForm1
newpca2 = pcrResult$rotation[, 2]
pcaMatrixForm2 = as.matrix(newpca2)
prcomp2 = scaleIndiv %*% pcaMatrixForm2
toPlot = as.data.frame(kmm.results$voiceType)
toPlot = cbind(toPlot, kmm.results$`kmm$cluster`, prcomp1, prcomp2)
names(toPlot) = c("Voice Type", "Cluster Results", "First Principal Component", "Second Principal Component")
plot(toPlot$`First Principal Component`, toPlot$`Second Principal Component`, pch=c('S', 'A', 'T', 'B')[as.numeric(toPlot$`Voice Type`)], col = c('red', 'green', 'blue', 'black')[toPlot$`Cluster Results`], xlab = "First Principal Component", ylab = "Second Principal Component", main = "Cluster Results")
